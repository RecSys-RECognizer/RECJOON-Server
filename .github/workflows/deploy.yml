# This is a basic workflow to help you get started with Actions

name: deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]

env:
   RECJOON_RDS_HOST: ${{ secrets.RECJOON_RDS_HOST }}
   RECJOON_RDS_PORT: ${{ secrets.RECJOON_RDS_PORT }}
   RECJOON_RDS_USERNAME: ${{ secrets.RECJOON_RDS_USERNAME }}
   RECJOON_RDS_PASSWORD: ${{ secrets.RECJOON_RDS_PASSWORD }}
   RECJOON_RDS_DATABASE: ${{ secrets.RECJOON_RDS_DATABASE }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build and Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    defaults: 
      run: 
        working-directory: ./web_server

    env:
      CI: false
    
    strategy:
      matrix:
        node-version: [16.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    if: github.event.pull_request.merged == true
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout source code.
        uses: actions/checkout@v3
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # - name: Install server dependencies
      #   run: npm run install
      #   working-directory: ./server

      - name: Install client dependencies
        run: npm install
        working-directory: ./web_server/client

      # - name: Build server
      #   run: CI=false && npm run build
      #   working-directory: ./server

      - name: Build client
        run: CI=false && npm run build
        working-directory: ./web_server/client

      - name: Create zip
        run: zip -qq -r ./recjoon_server.zip .
        shell: bash

      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./recjoon_server.zip s3://recjoon-server/server/recjoon_server.zip
        
      - name: Deploy with AWS CodeDeploy
        run: aws deploy create-deployment
          --application-name recjoon_server_code_deploy
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name server_code_deploy
          --s3-location bucket=recjoon-server,bundleType=zip,key=server/recjoon_server.zip
